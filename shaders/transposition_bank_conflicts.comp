#version 450

layout(std430, binding = 0) buffer Input
{
   float inputs[];
};

layout(std430, binding = 1) buffer Output
{
   float outputs[];
};

layout (local_size_x_id = 1, local_size_y_id = 2, local_size_z_id = 3) in;

layout (constant_id = 4) const uint inputStride_0 = 1;
layout (constant_id = 5) const uint inputStride_1 = 1;
layout (constant_id = 6) const uint inputStride_2 = 1;

layout(push_constant) uniform PushConsts
{
	uint pushID;
} consts;

uint index(uint index_x, uint index_y) {
    return index_x * inputStride_0 + index_y * inputStride_1 + gl_GlobalInvocationID.z * inputStride_2;
}
//stride below makes the access to the elements from the same column serialized
const uint stride = gl_WorkGroupSize.x;
shared float sdata[gl_WorkGroupSize.y*stride];

void main()
{
	//opposite elements ids
	uint id=index(gl_GlobalInvocationID.x, gl_GlobalInvocationID.y);
	uint id_comp=index(gl_WorkGroupID.y*gl_WorkGroupSize.x + gl_LocalInvocationID.x, gl_WorkGroupID.x*gl_WorkGroupSize.y + gl_LocalInvocationID.y);
	//write along the rows
	uint pos = gl_LocalInvocationID.y*stride + gl_LocalInvocationID.x;
	sdata[pos]=inputs[id];
	//shared memory barrier, so all threads finish writing to it before reading from it
	memoryBarrierShared();
	barrier();
	//read along the columns
	pos = gl_LocalInvocationID.y + gl_LocalInvocationID.x*stride;
	outputs[id_comp]=sdata[pos];


}
